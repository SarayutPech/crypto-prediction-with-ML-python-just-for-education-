# -*- coding: utf-8 -*-
"""PJ_ML_demo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nB-XoKbig_Qg1nv7TIPs6MPJ2FXHGPnF
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import StandardScaler
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from matplotlib.pyplot import figure
from sklearn.svm import SVR
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.tree import DecisionTreeClassifier

import copy
import pickle

import matplotlib.pyplot as plt
import matplotlib.image as mpimg

def pic(action):
  buy = mpimg.imread('/content/buy.jpg')
  sell =  mpimg.imread('/content/sell.png')
  if action == 'Buy':
    imgplot = plt.imshow(buy)
  else:
    imgplot = plt.imshow(sell)
  plt.show()

classi = pickle.load(open('/content/ETHUSDT_1h_classi_model', 'rb'))
lr =  pickle.load(open('/content/ETHUSDT_1h_lr_model', 'rb'))

data = [{'open':2793.54, 'high':2814.66, 'low':2793.09}]
test_data = pd.DataFrame(data)
classi_ans = classi.predict(test_data)
lr_ans = lr.predict(test_data)

if lr_ans[0] >= data[0]['open']:
  lr_action = 'Buy'
else:
  lr_action = 'Sell'

print('classification : ',classi_ans[0])
pic(classi_ans[0])
print('========================')
print('registration price : ',lr_ans[0][0])
print('registration action : ',lr_action)
pic(lr_action)


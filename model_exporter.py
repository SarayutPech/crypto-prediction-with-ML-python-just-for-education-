# -*- coding: utf-8 -*-
"""PJ_ML_model_exporter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I1toDxdRseq_nulDDYYKnVnM8DpsKXJw
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import StandardScaler
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from matplotlib.pyplot import figure
from sklearn.svm import SVR
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.tree import DecisionTreeClassifier

import copy
import pickle

link = 'https://www.cryptodatadownload.com/cdd/ADAUSDT_Binance_futures_data_hour.csv'
name = 'ADAUSDT_1h'

"""## Linear"""

csv = pd.read_csv( link ,skiprows=1)
csv.drop(columns='unix',inplace = True)
csv['tradecount'].fillna( csv['tradecount'].mean() )
X = csv[['open','high','low']]
# X.drop( columns='close' ,inplace = True)
Y = csv[[ 'close' ]]
all_X = csv.iloc[:, 2:]
all_Y = csv[[ 'close' ]]

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 6301)

lr = LinearRegression()
best_param = {'fit_intercept': True, 'normalize': False}
lr.set_params( **best_param )
lr.fit( X_train, Y_train )

"""##Classi"""

csv = pd.read_csv(link,skiprows=1)
csv.drop(columns='unix',inplace=True)
csv.drop(columns='symbol',inplace=True)
for index, row in csv.iterrows():
  #row["shoud_pay_ot"] = "Something" << is not worked
  if row["open"] < row["close"]:
    csv.loc[index,"Should_do"] = "Buy"
  else:
    csv.loc[index,"Should_do"] = "Sell"
csv.drop(columns='close',inplace=True)
X = csv[['open','high','low']]
Y = csv[['Should_do']]
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 6301)

param = {'ccp_alpha': 0.0,
 'class_weight': None,
 'criterion': 'gini',
 'max_depth': 10,
 'max_features': None,
 'max_leaf_nodes': None,
 'min_impurity_decrease': 0.0,
 'min_samples_leaf': 1,
 'min_samples_split': 2,
 'min_weight_fraction_leaf': 0.0,
 'random_state': None,
 'splitter': 'best'}

ModelDT = DecisionTreeClassifier( **param)
ModelDT.fit(X_train,Y_train)

lr_name = name + '_lr_model'
pickle.dump(lr, open(lr_name, 'wb'))

classi_name = name + '_classi_model'
pickle.dump(ModelDT, open(classi_name, 'wb'))

data = [{'open':385.5, 'high':386.6, 'low':384.4}]
test_data = pd.DataFrame(data)
classi_ans = ModelDT.predict(test_data)
lr_ans = lr.predict(test_data)

if lr_ans[0] >= data[0]['open']:
  lr_action = 'Buy'
else:
  lr_action = 'Sell'

print('classi : ',classi_ans[0])
print('lr : ',lr_action)

# https://www.cryptodatadownload.com/data/binance/ train_data